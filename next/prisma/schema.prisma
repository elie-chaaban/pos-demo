generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String    @id @default(cuid())
  name        String
  email       String?   @unique
  phone       String
  address     String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sales       Sale[]

  @@map("customers")
}

model Employee {
  id               String            @id @default(cuid())
  name             String
  email            String            @unique
  phone            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  employeeServices EmployeeService[]
  sales            SaleItem[]

  @@map("employees")
}

model EmployeeService {
  id             String   @id @default(cuid())
  employeeId     String
  itemId         String
  commissionRate Float    @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  item           Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  employee       Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, itemId])
  @@map("employee_services")
}

model Item {
  id               String            @id @default(cuid())
  name             String
  price            Float
  stock            Int               @default(0)
  isService        Boolean           @default(false)
  description      String?
  averageCost      Float?            @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  employeeServices EmployeeService[]
  inventoryRecords InventoryRecord[]
  saleItems        SaleItem[]

  @@map("items")
}

model Sale {
  id               String            @id @default(cuid())
  date             DateTime          @default(now())
  customerId       String?
  subtotal         Float
  tax              Float
  total            Float
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  inventoryRecords InventoryRecord[]
  items            SaleItem[]
  customer         Customer?         @relation(fields: [customerId], references: [id])

  @@map("sales")
}

model SaleItem {
  id               String   @id @default(cuid())
  saleId           String
  itemId           String
  employeeId       String
  quantity         Int
  price            Float
  total            Float
  commissionRate   Float?   @default(0)
  salonOwnerRate   Float?   @default(0)
  commissionAmount Float?   @default(0)
  salonOwnerAmount Float?   @default(0)
  createdAt        DateTime @default(now())
  employee         Employee @relation(fields: [employeeId], references: [id])
  item             Item     @relation(fields: [itemId], references: [id])
  sale             Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model InventoryRecord {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  itemId    String
  saleId    String?
  type      String
  quantity  Int
  unitCost  Float
  totalCost Float
  cogsTotal Float?   @default(0)
  createdAt DateTime @default(now())
  sale      Sale?    @relation(fields: [saleId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@map("inventory_records")
}

model Expense {
  id            String          @id @default(cuid())
  date          DateTime        @default(now())
  description   String
  categoryId    String
  amount        Float
  paymentMethod String
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model ExpenseCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expenses    Expense[]

  @@map("expense_categories")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  email     String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}
